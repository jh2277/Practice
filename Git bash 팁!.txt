== Git 8시 대강당 모임 ==

(참고. == git에서 주로 사용하는 명령어들 ==
git clone 복사할레포지토리주소  
git branch 브랜치명 
git checkout 브랜치명
git add . 
git commit -m "변경 내용 쓰기" 
git push origin 브랜치명
git checkout main 
git pull origin main
)

== 협업 관련하여 ==

folk는 다른팀의 것을 가져다 수정할때 쓰는거지, 같이 작업할때는 folk를 쓰는게 아니다!


== git 처음 시작시 ==
프로젝트 장이 팀원들과 공유하고자 하는 폴더에 들어가서 터미널 창 실행 후

1. git init

2. git config --global user.name "유저이름"
3. git config --global user.email "유저이메일"
(2,3번은 해당 아이디로 완전 처음 git 사용할 때 한번만 설정해주면 된다.)

4. git remote add origin 원격레포지토리저장소주소
(아무것도 안나올 경우 실행된 것이고, 이미 연결되어 있을경우 fatal 에러가 뜬다.)
(해당 주소를 origin이라는 이름의 원격저장소로서 지정하겠다. 한마디로 해당 원격저장소를 부를 별칭)

5. git add .
-> 앞으로 git으로 관리할 파일을 추가하겠다.(임시저장소에) '.'은 현재 폴더 내 all의 의미.

6. git commit -m "커밋메시지 v.1"
-> 관리할 파일의 지금 버전의 파일을 기록하겠다. 로컬 git 저장소에.

7. git push origin master
-> 연결한 원격 레포저장소의 master branch에 업로드하겠다.

8. 프로젝트 장은
깃헙의 공유할 레포지토리의 settings -> manage access -> add people

9. 그러면 협업하는 사람을 추가했으면 협업하는 사람은

git clone 해당깃헙주소

입력하여 해당 깃헙의 내용을 그대로 복사해옴.

(참고. git clone은 github 저장소(원격 저장소)를 만든 사람이 아닌, 협업에 참여할 사람이 하는 것.)


10. 복사해온 파일들을 각자 수정, 업데이트 하고 올릴때는 위 5번 add부터 시작해서 push까지 하면 됨.

11. 만약 다른 분들이 해당 파일들을 수정해서 업데이트 했을경우 우선

git pull origin master

를 입력하여 수정된 파일들을 받아온 후그 수정된 파일에서 추가적으로 작성한다.


########### 동일한 부분을 팀원간에 작성하지 말것! ###########

### 따라서, 왠만하면 파일 단위로 팀원 간의 역할을 분배한다.
###

### 파일 단위로 분배하기 어렵다면, 함수 단위로 분배하는 것을 추천
###

위 이유들은 git에서 컨플릭트(코드 충돌) 날 확률 때문이다.